struct Inner{
    int i;
    bool b;
};

struct Outer{
    struct Inner inner;
    int i;
    bool b;
};

void voidFunc(int i, bool b) {
    return;
}

bool boolFunc(int i, bool b) {
    int res;
    bool bb;
    if ((i(int) == 1)) {
        res(int) = 1;
    }
    else {
        if ((i(int) == 2)) {
            res(int) = 2;
        }
        else {
            if ((i(int) == 3)) {
                res(int) = 3;
            }
        }
    }
    while (((b(bool) == false) || (res(int) < 5))) {
        int x;
        x(int) = (((res(int) / 2) + 4) - (8 * 16));
        if ((x(int) >= 10)) {
            b(bool) = true;
        }
        else {
            res(int) = (res(int) - 1);
        }
    }
    voidFunc(int, bool->void)(res(int), true);
    repeat (((res(int) * res(int)) / 2)) {
        b(bool) = ((true && (res(int) <= 5)) || (res(int) > 69));
    }
    if ((b(bool) != false)) {
        if ((res(int) > 15)) {
            b(bool) = true;
        }
    }
    bb(bool) = (!b(bool));
    --res(int);
    ++res(int);
    res(int) = (-res(int));
    print << res(int);
    receive >> bb(bool);
    return res(int);
}

int intFunc() {
    int i;
    bool b;
    struct Outer outer;
    struct Inner inner;
    ((outer(Outer)).inner(Inner)).i(int) = 1;
    ((outer(Outer)).inner(Inner)).b(bool) = true;
    (inner(Inner)).i(int) = 2;
    (inner(Inner)).b(bool) = false;
    i(int) = 3;
    b(bool) = true;
    voidFunc(int, bool->void)(i(int), ((outer(Outer)).inner(Inner)).b(bool));
    boolFunc(int, bool->bool)(i(int), b(bool));
    boolFunc(int, bool->bool)((inner(Inner)).i(int), (inner(Inner)).b(bool));
    boolFunc(int, bool->bool)(((outer(Outer)).inner(Inner)).i(int), ((outer(Outer)).inner(Inner)).b(bool));
}

void main() {
    intFunc(->int)();
}

